package examen.services.parte1;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import examen.dao.EquiposDao;
import examen.dao.FutbolistasDao;
import examen.dao.PaisesDao;
import examen.modelo.Equipo;
import examen.modelo.Futbolista;
import examen.modelo.Pais;
import examen.services.DbService;
import examen.services.EquipoNotFoundException;
import examen.services.FutbolDbException;

public class FutbolDbServiceImpl extends DbService implements FutbolDbService {
	private EquiposDao equipoDao;
	private FutbolistasDao futbolistaDao;
	private PaisesDao paisesDao;
	// TODO: En esta clase es donde tienes que implementar tu código.
	// TODO: Mira los comentarios escritos en la interfaz FutbolDbService

	public FutbolDbServiceImpl() {
	}

	/**
	 * Este método tiene que consultar en BBDD el equipo con el ID que le llega por
	 * parámetro. Tiene que devolver un equipo completo con todos sus datos. Es
	 * decir, con todos sus atributos incluyendo su país (código y descripción) y su
	 * lista de futbolistas completa. Utiliza los DAO que has implementado para
	 * ello. Y también el DAO de Paises proporcionado.
	 * 
	 * Si el equipo no existe, tendrás que lanzar EquipoNotFoundException con un
	 * mensaje y el origen de la excepción. Si hay algún error al hacer la consulta,
	 * tendrás que lanzar FutbolDbException con un mensaje y el origen de la
	 * excepción.
	 */
	@Override
	public Equipo consultarEquipo(Long id) throws FutbolDbException, EquipoNotFoundException {
		try (Connection conn = openConnection()) {
			equipoDao = new EquiposDao();
			Equipo equipo1 = equipoDao.selectById(conn, id);
			futbolistaDao = new FutbolistasDao();
			List<Futbolista> listaFutbolista1 = futbolistaDao.selectByEquipo(conn, id);
			paisesDao = new PaisesDao();
//			Map<String, String> map = paisesDao.getAllMapPaises();
//			Pais pais = equipo1.getPais();
//			pais.setDescripcion(map.get(pais.getCodigo()));
			if (equipo1 != null) {
				equipo1.setPlantilla(listaFutbolista1);

			} else {
				throw new EquipoNotFoundException("No existe un equipo con ese ID");
			}
			return equipo1;
		} catch (SQLException e) {
			throw new FutbolDbException("Hubo un problema", e);
		}

	}

	@Override
	public List<Equipo> insertarListaEquipos(List<Equipo> equipos) throws FutbolDbException {
		try (Connection conn = openConnection()) {
			List<Equipo> listaEquipos = equipos;
			for (Equipo equipo : listaEquipos) {
				equipoDao = new EquiposDao();
				Equipo equipo2 = new Equipo();
				equipo2 = equipo;
				equipo2 = equipoDao.selectById(conn, equipo.getId());
				if (equipo.getId() ) {
					Long key = equipoDao.insert(conn, equipo);
				} else {
					throw new FutbolDbException("Ya existe ese codigo de equipo");
				}

			}

			return listaEquipos;
		} catch (SQLException e) {
			throw new FutbolDbException("Problema insertando la lista de equipos", e);
		}

	}

}
